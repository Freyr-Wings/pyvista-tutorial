
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/03_figures/exercises/c_edl.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_03_figures_exercises_c_edl.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_03_figures_exercises_c_edl.py:


Eye Dome Lighting
~~~~~~~~~~~~~~~~~

Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique
designed to improve depth perception in scientific visualization images.
To learn more, please see `this blog post`_.

.. _this blog post: https://blog.kitware.com/eye-dome-lighting-a-non-photorealistic-shading-technique/

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default


    import pyvista as pv
    from pyvista import examples


.. GENERATED FROM PYTHON SOURCE LINES 19-25

Statue
++++++

Eye-Dome Lighting can dramatically improve depth perception when plotting
incredibly sophisticated meshes like the creative commons Queen Nefertiti
statue:

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: default


    nefertiti = examples.download_nefertiti()
    nefertiti.plot(eye_dome_lighting=True, cpos=[-1, -1, 0.2], color=True)


.. GENERATED FROM PYTHON SOURCE LINES 30-31

Here we will compare a EDL shading side by side with normal shading

.. GENERATED FROM PYTHON SOURCE LINES 31-49

.. code-block:: default


    p = pv.Plotter(shape=(1, 2), border=False)

    # With eye-dome lighting
    p.subplot(0, 0)
    p.add_mesh(nefertiti, color=True)
    p.enable_eye_dome_lighting()
    p.add_text("Eye-Dome Lighting", font_size=24)
    p.camera_position = [-1, -1, 0.2]

    # No eye-dome lighting
    p.subplot(0, 1)
    p.add_mesh(nefertiti, color=True)
    p.add_text("No Eye-Dome Lighting", font_size=24)
    p.camera_position = [-1, -1, 0.2]

    p.show()


.. GENERATED FROM PYTHON SOURCE LINES 50-55

Point Cloud
+++++++++++

When plotting a simple point cloud, it can be difficult to perceive depth.
Take this Lidar point cloud for example:

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: default


    point_cloud = examples.download_lidar()



.. GENERATED FROM PYTHON SOURCE LINES 60-61

And now plot this point cloud as-is:

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default


    # Plot a typical point cloud with no EDL
    p = pv.Plotter()
    p.add_mesh(point_cloud, color="tan", point_size=5)
    p.show()



.. GENERATED FROM PYTHON SOURCE LINES 69-73

We can improve the depth mapping by enabling eye dome lighting on the
renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`.

Try plotting that point cloud with Eye-Dome-Lighting yourself below:

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh(point_cloud, color="tan", point_size=5)
    ...  # Turn on eye dome lighting here
    p.show()



.. GENERATED FROM PYTHON SOURCE LINES 81-84

The eye dome lighting mode can also handle plotting scalar arrays. Try the
above block but by specifying a ``scalars`` array instead of ``color`` in
the ``add_mesh`` call.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_tutorial_03_figures_exercises_c_edl.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/pyvista/pyvista-tutorial/gh-pages?urlpath=lab/tree/notebooks/tutorial/03_figures/exercises/c_edl.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: c_edl.py <c_edl.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: c_edl.ipynb <c_edl.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
