
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/02_mesh/a_lesson.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_02_mesh_a_lesson.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_02_mesh_a_lesson.py:


Lesson Overview
~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 6-11

.. code-block:: default


    import numpy as np
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 12-16

What is a Point?
^^^^^^^^^^^^^^^^

Let’s start with a point cloud – this is a mesh type that only has vertices. You can create one by defining a 2D array of Cartesian coordinates like so:

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: default


    points = np.random.rand(100, 3)
    points[:5, :]  # output first 5 rows





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[0.22680878, 0.69761774, 0.31064156],
           [0.25758982, 0.09644169, 0.31536641],
           [0.33541295, 0.94739479, 0.64406424],
           [0.96023777, 0.822326  , 0.57293435],
           [0.58088867, 0.99204759, 0.40201356]])



.. GENERATED FROM PYTHON SOURCE LINES 21-22

Pass numpy array of points (n by 3) to PolyData

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    mesh = pv.PolyData(points)
    mesh






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>100</td></tr>
    <tr><td>N Points</td><td>100</td></tr>
    <tr><td>X Bounds</td><td>4.125e-03, 9.992e-01</td></tr>
    <tr><td>Y Bounds</td><td>7.139e-03, 9.920e-01</td></tr>
    <tr><td>Z Bounds</td><td>3.385e-04, 9.896e-01</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    mesh.plot(point_size=10, style="points")




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_001.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 29-30

But it’s important to note that most meshes have some sort of connectivity between points such as this gridded mesh:

.. GENERATED FROM PYTHON SOURCE LINES 30-40

.. code-block:: default


    mesh = examples.load_hexbeam()
    cpos = [(6.20, 3.00, 7.50), (0.16, 0.13, 2.65), (-0.28, 0.94, -0.21)]

    pl = pv.Plotter()
    pl.add_mesh(mesh, show_edges=True, color="white")
    pl.add_points(mesh.points, color="red", point_size=20, render_points_as_spheres=True)
    pl.camera_position = cpos
    pl.show()




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_002.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-49

.. code-block:: default

    mesh = examples.download_bunny_coarse()

    pl = pv.Plotter()
    pl.add_mesh(mesh, show_edges=True, color="white")
    pl.add_points(mesh.points, color="red", point_size=10)
    pl.camera_position = [(0.02, 0.30, 0.73), (0.02, 0.03, -0.022), (-0.03, 0.94, -0.34)]
    pl.show()




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_003.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-54

What is a Cell?
^^^^^^^^^^^^^^^

A cell is the geometry between points that defines the connectivity or topology of a mesh. In the examples above, cells are defined by the lines (edges colored in black) connecting points (colored in red). For example, a cell in the beam example is a voxel defined by the region between eight points in that mesh:

.. GENERATED FROM PYTHON SOURCE LINES 54-67

.. code-block:: default


    mesh = examples.load_hexbeam()

    pl = pv.Plotter()
    pl.add_mesh(mesh, show_edges=True, color="white")
    pl.add_points(mesh.points, color="red", point_size=20)

    single_cell = mesh.extract_cells(mesh.n_cells - 1)
    pl.add_mesh(single_cell, color="pink", edge_color="blue", line_width=5, show_edges=True)

    pl.camera_position = [(6.20, 3.00, 7.50), (0.16, 0.13, 2.65), (-0.28, 0.94, -0.21)]
    pl.show()




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_004.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-69

Cells aren’t limited to voxels, they could be a triangle between three points, a line between two points, or even a single point could be its own cell (but that’s a special case).

.. GENERATED FROM PYTHON SOURCE LINES 71-75

What are attributes?
^^^^^^^^^^^^^^^^^^^^

Attributes are data values that live on either the points or cells of a mesh. In PyVista, we work with both point data and cell data and allow easy access to data dictionaries to hold arrays for attributes that live either on all points or on all cells of a mesh. These attributes can be accessed in a dictionary-like attribute attached to any PyVista mesh accessible as one of the following:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

Point Data
~~~~~~~~~~
Point data refers to arrays of values (scalars, vectors, etc.) that live on each point of the mesh. Each element in an attribute array corresponds to a point in the mesh. Let’s create some point data for the beam mesh. When plotting, the values between points are interpolated across the cells.

.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: default


    mesh.point_data["my point values"] = np.arange(mesh.n_points)
    mesh.plot(scalars="my point values", cpos=cpos, show_edges=True)




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_005.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-88

Cell Data
~~~~~~~~~~
Cell data refers to arrays of values (scalars, vectors, etc.) that live throughout each cell of the mesh. That is the entire cell (2D face or 3D volume) is assigned the value of that attribute.

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: default


    mesh.cell_data["my cell values"] = np.arange(mesh.n_cells)
    mesh.plot(scalars="my cell values", cpos=cpos, show_edges=True)




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_006.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-94

Here’s a comparison of point data versus cell data and how point data is interpolated across cells when mapping colors. This is unlike cell data which has a single value across the cell’s domain:

.. GENERATED FROM PYTHON SOURCE LINES 94-106

.. code-block:: default


    import pyvista as pv
    from pyvista import examples

    uni = examples.load_uniform()

    pl = pv.Plotter(shape=(1, 2), border=False)
    pl.add_mesh(uni, scalars="Spatial Point Data", show_edges=True)
    pl.subplot(0, 1)
    pl.add_mesh(uni, scalars="Spatial Cell Data", show_edges=True)
    pl.show()




.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_007.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-110

Field Data
~~~~~~~~~~
Field data is not directly associated with either the points or cells but still should be attached to the mesh. This may be a string array storing notes.

.. GENERATED FROM PYTHON SOURCE LINES 112-118

Assigning Scalars to a Mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here’s how we assign values to cell attributes and plot it. Here, we generate cube containing 6 faces and assign each face an integer from range(6) and then have it plotted.

Note how this varies from assigning scalars to each point

.. GENERATED FROM PYTHON SOURCE LINES 118-129

.. code-block:: default

    cube = pv.Cube()
    cube.cell_data["myscalars"] = range(6)

    other_cube = cube.copy()
    other_cube.point_data["myscalars"] = range(8)

    pl = pv.Plotter(shape=(1, 2), border_width=1)
    pl.add_mesh(cube, cmap="coolwarm")
    pl.subplot(0, 1)
    pl.add_mesh(other_cube, cmap="coolwarm")
    pl.show()



.. image-sg:: /tutorial/02_mesh/images/sphx_glr_a_lesson_008.png
   :alt: a lesson
   :srcset: /tutorial/02_mesh/images/sphx_glr_a_lesson_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.603 seconds)


.. _sphx_glr_download_tutorial_02_mesh_a_lesson.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: a_lesson.py <a_lesson.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: a_lesson.ipynb <a_lesson.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
