
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/06_data/b_create-poly.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_06_data_b_create-poly.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_06_data_b_create-poly.py:


.. _ref_create_poly:

Create PolyData
~~~~~~~~~~~~~~~

Creating a :class:`pyvista.PolyData` (surface mesh) from vertices and faces.

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default


    import numpy as np
    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 15-19

A PolyData object can be created quickly from numpy arrays.  The vertex array
contains the locations of the points in the mesh and the face array contains
the number of points of each face and the indices of the vertices which
comprise that face.

.. GENERATED FROM PYTHON SOURCE LINES 19-44

.. code-block:: default


    # mesh points
    vertices = np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0.5, 0.5, -1]])

    # mesh faces
    faces = np.hstack(
        [
            [4, 0, 1, 2, 3],  # square
            [3, 0, 1, 4],  # triangle
            [3, 1, 2, 4],  # triangle
        ]
    )

    surf = pv.PolyData(vertices, faces)

    # plot each face with a different color
    surf.plot(
        scalars=np.arange(3),
        cpos=[-1, 1, 0.5],
        show_scalar_bar=False,
        show_edges=True,
        line_width=5,
    )





.. image-sg:: /tutorial/06_data/images/sphx_glr_b_create-poly_001.png
   :alt: b create poly
   :srcset: /tutorial/06_data/images/sphx_glr_b_create-poly_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 45-52

Polygonal PolyData
^^^^^^^^^^^^^^^^^^
Create a three face polygonal mesh directly from points and faces.

.. note::
   It is generally more efficient to use a numpy array rather than stacking
   lists for large meshes.

.. GENERATED FROM PYTHON SOURCE LINES 52-82

.. code-block:: default


    points = np.array(
        [
            [0.0480, 0.0349, 0.9982],
            [0.0305, 0.0411, 0.9987],
            [0.0207, 0.0329, 0.9992],
            [0.0218, 0.0158, 0.9996],
            [0.0377, 0.0095, 0.9992],
            [0.0485, 0.0163, 0.9987],
            [0.0572, 0.0603, 0.9965],
            [0.0390, 0.0666, 0.9970],
            [0.0289, 0.0576, 0.9979],
            [0.0582, 0.0423, 0.9974],
            [0.0661, 0.0859, 0.9941],
            [0.0476, 0.0922, 0.9946],
            [0.0372, 0.0827, 0.9959],
            [0.0674, 0.0683, 0.9954],
        ],
    )


    face_a = [6, 0, 1, 2, 3, 4, 5]
    face_b = [6, 6, 7, 8, 1, 0, 9]
    face_c = [6, 10, 11, 12, 7, 6, 13]
    faces = np.concatenate((face_a, face_b, face_c))

    mesh = pv.PolyData(points, faces)
    mesh.plot(show_edges=True, line_width=5)





.. image-sg:: /tutorial/06_data/images/sphx_glr_b_create-poly_002.png
   :alt: b create poly
   :srcset: /tutorial/06_data/images/sphx_glr_b_create-poly_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-88

Quad PolyData
^^^^^^^^^^^^^
Let's create a box :class:`pyvista.PolyData` (surface mesh) from vertices
and faces.
Below, we have defined the vertices and the connectivity of the mesh for you.

.. GENERATED FROM PYTHON SOURCE LINES 88-116

.. code-block:: default


    # mesh points
    vertices = np.array(
        [
            [0, 0, 0],
            [1, 0, 0],
            [1, 1, 0],
            [0, 1, 0],
            [0, 0, 1],
            [1, 0, 1],
            [1, 1, 1],
            [0, 1, 1],
        ],
        dtype=float,
    )

    # mesh connectivity
    connectivity = np.array(
        [
            [0, 1, 2, 3],
            [4, 5, 6, 7],
            [0, 1, 5, 4],
            [1, 2, 6, 5],
            [2, 3, 7, 6],
            [3, 0, 4, 7],
        ],
        dtype=int,
    )







.. GENERATED FROM PYTHON SOURCE LINES 117-122

It's important to note that PyVista and VTK expect the faces array to be
constructed in such a way that the cell number of nodes defining the cell
are prepending each row.
In this example, each cell is a square/quad and thus has 4 nodes. We must
prepend 4's to each row in ``connectivity``:

.. GENERATED FROM PYTHON SOURCE LINES 122-126

.. code-block:: default

    counts = np.ones(len(connectivity), dtype=int) * 4
    faces = np.column_stack((counts, connectivity))
    faces





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[4, 0, 1, 2, 3],
           [4, 4, 5, 6, 7],
           [4, 0, 1, 5, 4],
           [4, 1, 2, 6, 5],
           [4, 2, 3, 7, 6],
           [4, 3, 0, 4, 7]])



.. GENERATED FROM PYTHON SOURCE LINES 127-137

.. code-block:: default

    surf = pv.PolyData(vertices, faces.ravel())

    # plot each face with a different color
    surf.plot(
        cpos=[-1, 1, 0.5],
        show_edges=True,
        line_width=5,
    )





.. image-sg:: /tutorial/06_data/images/sphx_glr_b_create-poly_003.png
   :alt: b create poly
   :srcset: /tutorial/06_data/images/sphx_glr_b_create-poly_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 138-140

We can add data to the box you created. Please add the point number of each
point as point data. Also, add a face number to each face as cell data.

.. GENERATED FROM PYTHON SOURCE LINES 140-143

.. code-block:: default


    # insert your code here (answer below)








.. GENERATED FROM PYTHON SOURCE LINES 144-148

.. code-block:: default


    surf["point_number"] = range(8)
    surf["face_number"] = range(6)








.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: default


    # plot each face with a different color
    surf.plot(show_edges=True, line_width=5, scalars="face_number")



.. image-sg:: /tutorial/06_data/images/sphx_glr_b_create-poly_004.png
   :alt: b create poly
   :srcset: /tutorial/06_data/images/sphx_glr_b_create-poly_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.113 seconds)


.. _sphx_glr_download_tutorial_06_data_b_create-poly.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/pyvista/pyvista-tutorial/gh-pages?urlpath=lab/tree/notebooks/tutorial/06_data/b_create-poly.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: b_create-poly.py <b_create-poly.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: b_create-poly.ipynb <b_create-poly.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
